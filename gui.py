import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import numpy as np
import tensorflow as tf
from gans.acgan import ACGAN
from gans.dcgan import DCGAN
from cnn import CNN, load_model
import matplotlib.pyplot as plt

class LaundryGANApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Laundry Tracker - GAN Augmentation & Classification")
        self.root.geometry("600x700")  # Increase height for better UI
        
        self.gan_options = {"ACGAN": ACGAN, "DCGAN": DCGAN}  # Add other GANs here
        self.selected_gan = tk.StringVar(value="ACGAN")
        
        # Load the pre-trained CNN model from main.py
        self.cnn_model = load_model(path='saved_models/cnn_model')
        self.init_ui()
    
    def init_ui(self):
        tk.Label(self.root, text="Upload Laundry Image:").pack(pady=10)
        tk.Button(self.root, text="Choose File", command=self.upload_image).pack(pady=5)
        
        self.image_label = tk.Label(self.root)
        self.image_label.pack(pady=10)
        
        tk.Label(self.root, text="Select GAN for Augmentation:").pack(pady=10)
        tk.OptionMenu(self.root, self.selected_gan, *self.gan_options.keys()).pack(pady=5)
        
        tk.Button(self.root, text="Apply GAN Augmentation", command=self.apply_gan).pack(pady=10)
        tk.Button(self.root, text="Classify with CNN", command=self.classify_image).pack(pady=5)
        
        self.result_label = tk.Label(self.root, text="Result: ", font=("Arial", 12))
        self.result_label.pack(pady=10)
        
        tk.Button(self.root, text="Visualize GANs Comparison", command=self.visualize_gans_comparison).pack(pady=20)
    
    def upload_image(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            self.image = Image.open(file_path).resize((64, 64))
            self.display_image()
    
    def display_image(self):
        img_tk = ImageTk.PhotoImage(self.image)
        self.image_label.config(image=img_tk)
        self.image_label.image = img_tk
    
    def apply_gan(self):
        gan_type = self.selected_gan.get()
        gan = self.gan_options[gan_type]()
        self.image_array = np.array(self.image) / 127.5 - 1
        augmented_img = gan.generate_samples(1, class_label=0)[0]  # Example class label
        self.image = Image.fromarray(((augmented_img + 1) * 127.5).astype(np.uint8))
        self.display_image()
        messagebox.showinfo("GAN Augmentation", f"Applied {gan_type} augmentation")
    
    def classify_image(self):
        img_array = np.array(self.image).reshape((1, 64, 64, 1)) / 255.0  # Reshape to match CNN input
        prediction = np.argmax(self.cnn_model.predict(img_array))
        self.result_label.config(text=f"Result: {prediction}")
    
    def visualize_gans_comparison(self):
        gan_types = list(self.gan_options.keys())
        fig, axes = plt.subplots(1, len(gan_types) + 1, figsize=(15, 5))
        
        # Display the original image
        axes[0].imshow(self.image)
        axes[0].set_title("Original")
        axes[0].axis('off')
        
        # Display images generated by each GAN
        for i, gan_type in enumerate(gan_types):
            gan = self.gan_options[gan_type]()
            augmented_img = gan.generate_samples(1, class_label=0)[0]  # Example class label
            axes[i + 1].imshow((augmented_img + 1) * 127.5)  # Rescale to [0, 255]
            axes[i + 1].set_title(f"{gan_type}")
            axes[i + 1].axis('off')
        
        plt.show()

if __name__ == "__main__":
    root = tk.Tk()
    app = LaundryGANApp(root)
    root.mainloop()
